/***********************************************
* GENERATED BY ZEBBLE
***********************************************/

using System;
using Zebble;
using Zebble.Services;
using Zebble.Plugin;
using Zebble.Device;
using UI.Modules;
using UI.Pages;
using UI.Templates;
using System.Threading.Tasks;

namespace UI
{
    public class CssStyles
    {
        public static void LoadAll()
        {
            // ======================================================================
            // App.UI\Styles\Common.css----------------------------------------------
            CssEngine.Add(new File_App.UI.Styles.Common.TextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonDisabledCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ImageViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ImageViewDisabledCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.IconButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.IconButtonDisabledCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.IconButtonTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopUpCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.IndicatorCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopUpHeaderTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopUpTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.IndicatorImageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DialogTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DialogButtonsRowButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DialogButtonsRowButtonPrimaryButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ToastCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ToastLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ToastOKButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextInputCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SwitchBarCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SwitchCheckedBarCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.OptionsListVerticalOptionsListOptionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.OptionsListOptionsListOptionLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.OptionsListOptionsListOptionCheckedLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PickerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PickerCaretCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DatePickerCellLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TimePickerCellLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DatePickerCellActiveLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TimePickerCellActiveLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavbarBackgroundCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarIconButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarNavbarButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarBackCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarBackIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarMenuIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ModalCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MenuDisplayerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MenuDisplayerOverlayCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TabsTabsTabCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TabsTabsTabActiveCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TabsTabsTabLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ListViewEmptyTextLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ListViewViewRowCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ListViewListViewItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ListViewListViewItemTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ListViewRightSlideInTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ListViewRightSlideInTextViewDeleteButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.StandardListListViewItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.StandardListListViewItemIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.StandardListListViewLazyLoadedListViewItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchInputCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchInputTextBoxCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchInputFocusTextBoxCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ModuleHeaderTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ListViewModuleHeaderTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HeaderIntroCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PrimaryButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BottomButtonsRowCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FormFieldHeaderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MainMenuCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MainMenuButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MainMenuLogoImageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MainMenuIconButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MainMenuIconButtonIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DefaultBodyScrollerBodyCssRule());

            // ======================================================================
            // App.UI\Styles\_Core.css-----------------------------------------------
            CssEngine.Add(new File_App.UI.Styles.Core.TextInputCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.ButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.CheckBoxCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.CheckBoxCheckedCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.CheckBoxCheckedImageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.IconButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.IconButtonTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.IconButtonIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.SearchInputIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.SearchInputTextBoxCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.SearchInputCancelButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.SearchInputFocusTextBoxCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.SearchInputFocusCancelButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.SwitchCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.SwitchBarCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.SwitchToggleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.FormFieldCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.FormFieldLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.FormFieldIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.DialogCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.DialogTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.DialogButtonsRowCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.PromptDescriptionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.PromptInputCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.AlertDialogMessageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.PopUpCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.PopupOverlayCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.WaitingOverlayCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.WaitingOverlay_1CssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.ToastCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.ToastOKButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.ToastLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.GridEmptyTextLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.ListViewEmptyTextLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.ListViewItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.ListViewLazyLoadedOptionsListOptionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.NavBarPageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.NavBarPageBodyScrollerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.NavBarPageBodyScrollerBodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.NavigationBarCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.NavigationBarTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.IndicatorCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.IndicatorImageViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.Indicator_1CssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.RefreshingIndicatorCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.TabsCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.TabsTabsTabCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.TabsTabsTabIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.TabsTabsTabLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.DatePickerCellCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.TimePickerCellCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.DatePickerCellLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.TimePickerCellLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.DatePickerDialogRotatorsRowCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.TimePickerDialogRotatorsRowCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.PickerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.PickerLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.PickerCaretCssRule());
            CssEngine.Add(new File_App.UI.Styles.Core.PickerPlaceholderLabelCssRule());
        }
    }
}

// Ensure auto-generated namespaces exist:
namespace UI.Modules { }
namespace UI.Pages { }
namespace UI.Templates { }
namespace Zebble.Plugin { }
namespace Zebble.Data { }

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "TextView")]
    [CssBody("color: black;")]
    class TextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.TextColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Button")]
    [CssBody("opacity: 1;")]
    class ButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Opacity = 1;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Button:disabled")]
    [CssBody("opacity: 0.3;")]
    class ButtonDisabledCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Button && view.PseudoCssState.ContainsWholeWord("disabled"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Opacity = 0.3f;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "ImageView")]
    [CssBody("opacity: 1;")]
    class ImageViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ImageView

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Opacity = 1;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "ImageView:disabled")]
    [CssBody("opacity: 0.3;")]
    class ImageViewDisabledCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is ImageView && view.PseudoCssState.ContainsWholeWord("disabled"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Opacity = 0.3f;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "IconButton")]
    [CssBody("opacity: 1;")]
    class IconButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: IconButton

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (IconButton)untypedView;
            view.Css.Opacity = 1;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "IconButton:disabled")]
    [CssBody("opacity: 0.3;")]
    class IconButtonDisabledCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is IconButton && view.PseudoCssState.ContainsWholeWord("disabled"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (IconButton)untypedView;
            view.Css.Opacity = 0.3f;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "IconButton #TextView")]
    [CssBody("color: white;")]
    class IconButtonTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextView

            view = CssEngine.FindParentByType<IconButton>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "PopUp")]
    [CssBody("margin-top: calc(\"View.Root.Height, view.Height, (r,h) => (r - h) / 2\");")]
    class PopUpCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: PopUp

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (PopUp)untypedView;
            view.Css.Margin.Top = new Length.BindingLengthRequest(View.Root.Height, view.Height, (r,h) => (r - h) / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Indicator")]
    [CssBody("margin-top: calc(\"View.Root.Height, view.Height, (r,h) => (r - h) / 2\");")]
    class IndicatorCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Indicator

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Indicator)untypedView;
            view.Css.Margin.Top = new Length.BindingLengthRequest(View.Root.Height, view.Height, (r,h) => (r - h) / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "PopUp #HeaderTitle")]
    [CssBody("font-size: 20px;")]
    class PopUpHeaderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #HeaderTitle

            view = CssEngine.FindParentByType<PopUp>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = 20;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "PopUp #Title")]
    [CssBody("font-size: 20px;")]
    class PopUpTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentByType<PopUp>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = 20;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Indicator #Image")]
    [CssBody("background: url(Images/icons/Spinner.gif);")]
    class IndicatorImageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Image

            view = CssEngine.FindParentByType<Indicator>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundImagePath = "Images/icons/Spinner.gif";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Dialog #Title")]
    [CssBody("color: #43aaa9; font-size: 20px;")]
    class DialogTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentByType<Dialog>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = 20;
            view.Css.TextColor = "#43aaa9";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Dialog #ButtonsRow Button")]
    [CssBody("color: #43aaa9;")]
    class DialogButtonsRowButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            view = CssEngine.FindParentById(view, "ButtonsRow");

            if (view == null) return false;

            view = CssEngine.FindParentByType<Dialog>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.TextColor = "#43aaa9";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Dialog #ButtonsRow Button.primary-button")]
    [CssBody("color: white;")]
    class DialogButtonsRowButtonPrimaryButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Button && HasClass(view, "primary-button"))) return false;

            view = CssEngine.FindParentById(view, "ButtonsRow");

            if (view == null) return false;

            view = CssEngine.FindParentByType<Dialog>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Toast")]
    [CssBody("background: white; padding: 20px; background: black;")]
    class ToastCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Toast

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Toast)untypedView;
            view.Css.Padding(20);
            view.Css.BackgroundColor = Colors.White;
            view.Css.BackgroundColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Toast #Label")]
    [CssBody("color: white;")]
    class ToastLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<Toast>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Toast #OKButton")]
    [CssBody("color: #43aaa9;")]
    class ToastOKButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #OKButton

            view = CssEngine.FindParentByType<Toast>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#43aaa9";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "TextInput")]
    [CssBody("padding: 7px;")]
    class TextInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Padding(7);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Switch #Bar")]
    [CssBody("background: #C8C8C8;")]
    class SwitchBarCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Bar

            view = CssEngine.FindParentByType<Switch>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = "#C8C8C8";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Switch:checked #Bar")]
    [CssBody("background: #43aaa9;")]
    class SwitchCheckedBarCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Bar

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Switch && view.PseudoCssState.ContainsWholeWord("checked")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = "#43aaa9";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "OptionsList:vertical OptionsList-Option")]
    [CssBody("margin-top: 6px;")]
    class OptionsListVerticalOptionsListOptionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: OptionsList-Option

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is OptionsList && view.PseudoCssState.ContainsWholeWord("vertical")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (OptionsList.Option)untypedView;
            view.Css.Margin.Top = 6;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "OptionsList OptionsList-Option #Label")]
    [CssBody("color: black;")]
    class OptionsListOptionsListOptionLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<OptionsList.Option>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<OptionsList>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "OptionsList OptionsList-Option:checked #Label")]
    [CssBody("color: #43aaa9;")]
    class OptionsListOptionsListOptionCheckedLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is OptionsList.Option && view.PseudoCssState.ContainsWholeWord("checked")) break;
                view = view.parent;
            }

            view = CssEngine.FindParentByType<OptionsList>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#43aaa9";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Picker")]
    [CssBody("padding: 7px; border-color: #e6e6e6;")]
    class PickerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Picker

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Picker)untypedView;
            view.Css.Padding(7);
            view.Css.Border.Color = "#e6e6e6";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Picker #Caret")]
    [CssBody("background: url(Images/Icons/Caret.png);")]
    class PickerCaretCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Caret

            view = CssEngine.FindParentByType<Picker>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundImagePath = "Images/Icons/Caret.png";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "DatePicker-Cell #Label")]
    [CssBody("color: #C8C8C8;")]
    class DatePickerCellLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<DatePicker.Cell>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#C8C8C8";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "TimePicker-Cell #Label")]
    [CssBody("color: #C8C8C8;")]
    class TimePickerCellLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<TimePicker.Cell>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#C8C8C8";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "DatePicker-Cell:active #Label")]
    [CssBody("color: black;")]
    class DatePickerCellActiveLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is DatePicker.Cell && view.PseudoCssState.ContainsWholeWord("active")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "TimePicker-Cell:active #Label")]
    [CssBody("color: black;")]
    class TimePickerCellActiveLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is TimePicker.Cell && view.PseudoCssState.ContainsWholeWord("active")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".navbar-background")]
    [CssBody("background: linear-gradient(to bottom, #43aaa9, #196e6d);")]
    class NavbarBackgroundCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .navbar-background

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = "linear-gradient(to bottom, #43aaa9, #196e6d)";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "NavigationBar IconButton")]
    [CssBody("margin: 0; padding: 0;")]
    class NavigationBarIconButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: IconButton

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (IconButton)untypedView;
            view.Css.Padding(0);
            view.Css.Margin(0);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "NavigationBar Button")]
    [CssBody("padding: 0;")]
    class NavigationBarButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Padding(0);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "NavigationBar #Title")]
    [CssBody("color: white;")]
    class NavigationBarTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "NavigationBar .navbar-button")]
    [CssBody("width: 42px; height: 100%; color: white;")]
    class NavigationBarNavbarButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .navbar-button

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 42;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "NavigationBar .back")]
    [CssBody("color: white;")]
    class NavigationBarBackCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .back

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "NavigationBar .back #Icon")]
    [CssBody("background: url(Images/Icons/Back.png); margin: 0; width: 48px; padding: 10px 5px; height: 100%;")]
    class NavigationBarBackIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = CssEngine.FindParentByCssClass(view, "back");

            if (view == null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 48;
            view.Css.Padding(vertical: 10, horizontal: 5);
            view.Css.Margin(0);
            view.Css.BackgroundImagePath = "Images/Icons/Back.png";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "NavigationBar .menu-icon")]
    [CssBody("background: url(Images/Icons/Burger.png); margin: 0; height: 45px;")]
    class NavigationBarMenuIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .menu-icon

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 45;
            view.Css.Margin(0);
            view.Css.BackgroundImagePath = "Images/Icons/Burger.png";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Modal")]
    [CssBody("background: white; padding: 20px; height: auto;")]
    class ModalCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Modal

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Modal)untypedView;
            view.Css.Height = null;
            view.Css.Padding(20);
            view.Css.BackgroundColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "MenuDisplayer")]
    [CssBody("position: absolute; width: 100%; height: 100%; MenuWidth: 250px;")]
    class MenuDisplayerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: MenuDisplayer

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (MenuDisplayer)untypedView;
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Absolute = true;
            view.MenuWidth = 250;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "MenuDisplayer #Overlay")]
    [CssBody("width: 100%; height: 100%; opacity: 0.35; background: black;")]
    class MenuDisplayerOverlayCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Overlay

            view = CssEngine.FindParentByType<MenuDisplayer>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Opacity = 0.35f;
            view.Css.BackgroundColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Tabs Tabs-Tab")]
    [CssBody("background-color: transparent;")]
    class TabsTabsTabCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Tabs-Tab

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Tabs.Tab)untypedView;
            view.Css.BackgroundColor = Colors.Transparent;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Tabs Tabs-Tab:active")]
    [CssBody("background-color: #43aaa9;")]
    class TabsTabsTabActiveCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Tabs.Tab && view.PseudoCssState.ContainsWholeWord("active"))) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Tabs.Tab)untypedView;
            view.Css.BackgroundColor = "#43aaa9";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Tabs Tabs-Tab #Label")]
    [CssBody("color: #eeeeee; padding-top: 5px;")]
    class TabsTabsTabLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<Tabs.Tab>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Top = 5;
            view.Css.TextColor = "#eeeeee";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "ListView #EmptyTextLabel")]
    [CssBody("color: #C8C8C8;")]
    class ListViewEmptyTextLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #EmptyTextLabel

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#C8C8C8";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "ListView .view-row")]
    [CssBody("width: 20px; height: 100%;")]
    class ListViewViewRowCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .view-row

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 20;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "ListView ListViewItem")]
    [CssBody("border-color: #e6e6e6;")]
    class ListViewListViewItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ListViewItem

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ListViewItem)untypedView;
            view.Css.Border.Color = "#e6e6e6";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "ListView ListViewItem .title")]
    [CssBody("font-weight: bold; margin-bottom: 10px;")]
    class ListViewListViewItemTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .title

            view = CssEngine.FindParentByType<ListViewItem>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = true;
            view.Css.Margin.Bottom = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "ListView #RightSlideIn TextView")]
    [CssBody("height: 100%; margin: 0; color: white; background: #444; padding: 10px; AutoSizeWidth: calc(\"true\");")]
    class ListViewRightSlideInTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            view = CssEngine.FindParentById(view, "RightSlideIn");

            if (view == null) return false;

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Height = 100.Percent();
            view.Css.Padding(10);
            view.Css.Margin(0);
            view.Css.TextColor = Colors.White;
            view.Css.BackgroundColor = "#444";
            view.AutoSizeWidth = true;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "ListView #RightSlideIn TextView.delete-button")]
    [CssBody("background: #ff4c32;")]
    class ListViewRightSlideInTextViewDeleteButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is TextView && HasClass(view, "delete-button"))) return false;

            view = CssEngine.FindParentById(view, "RightSlideIn");

            if (view == null) return false;

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.BackgroundColor = "#ff4c32";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".standard-list ListViewItem")]
    [CssBody("padding: 10px;")]
    class StandardListListViewItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ListViewItem

            view = CssEngine.FindParentByCssClass(view, "standard-list");

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ListViewItem)untypedView;
            view.Css.Padding(10);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".standard-list ListViewItem .icon")]
    [CssBody("width: 60px;")]
    class StandardListListViewItemIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .icon

            view = CssEngine.FindParentByType<ListViewItem>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByCssClass(view, "standard-list");

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 60;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".standard-list ListView:lazy-loaded ListViewItem")]
    [CssBody("height: 60px;")]
    class StandardListListViewLazyLoadedListViewItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ListViewItem

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is ListView && view.PseudoCssState.ContainsWholeWord("lazy-loaded")) break;
                view = view.parent;
            }

            view = CssEngine.FindParentByCssClass(view, "standard-list");

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ListViewItem)untypedView;
            view.Css.Height = 60;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "SearchInput")]
    [CssBody("margin-bottom: 5px;")]
    class SearchInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: SearchInput

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (SearchInput)untypedView;
            view.Css.Margin.Bottom = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "SearchInput #TextBox")]
    [CssBody("text-align: center;")]
    class SearchInputTextBoxCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextBox

            view = CssEngine.FindParentByType<SearchInput>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "SearchInput:focus #TextBox")]
    [CssBody("text-align: left;")]
    class SearchInputFocusTextBoxCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextBox

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is SearchInput && view.PseudoCssState.ContainsWholeWord("focus")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Left;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".module-header-title")]
    [CssBody("color: #43aaa9; margin-bottom: 20px;")]
    class ModuleHeaderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .module-header-title

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Bottom = 20;
            view.Css.TextColor = "#43aaa9";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".list-view .module-header-title")]
    [CssBody("padding: 5px; padding-right: 20px; height: 40px;")]
    class ListViewModuleHeaderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .module-header-title

            view = CssEngine.FindParentByCssClass(view, "list-view");

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 40;
            view.Css.Padding(5);
            view.Css.Padding.Right = 20;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".header-intro")]
    [CssBody("color: #888888; margin-bottom: 20px;")]
    class HeaderIntroCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .header-intro

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Bottom = 20;
            view.Css.TextColor = "#888888";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".primary-button")]
    [CssBody("color: white; background: #43aaa9;")]
    class PrimaryButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .primary-button

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;
            view.Css.BackgroundColor = "#43aaa9";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".bottom-buttons-row")]
    [CssBody("margin-top: 5px; margin-bottom: 5px;")]
    class BottomButtonsRowCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .bottom-buttons-row

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 5;
            view.Css.Margin.Bottom = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".form-field-header")]
    [CssBody("padding: 7px; font-weight: bold; font-size: 16px;")]
    class FormFieldHeaderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .form-field-header

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = true;
            view.Css.Font.Size = 16;
            view.Css.Padding(7);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "MainMenu")]
    [CssBody("background: #282828;")]
    class MainMenuCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: MainMenu

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (MainMenu)untypedView;
            view.Css.BackgroundColor = "#282828";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "MainMenu Button")]
    [CssBody("color: white; height: 50px;")]
    class MainMenuButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            view = CssEngine.FindParentByType<MainMenu>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Height = 50;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "MainMenu #LogoImage")]
    [CssBody("height: 90px; width: 100%; margin-bottom: 10px; margin-top: 10px;")]
    class MainMenuLogoImageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #LogoImage

            view = CssEngine.FindParentByType<MainMenu>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 90;
            view.Css.Width = 100.Percent();
            view.Css.Margin.Bottom = 10;
            view.Css.Margin.Top = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "MainMenu IconButton")]
    [CssBody("height: 50px; border-bottom-width: 1px; border-color: #505050; color: white;")]
    class MainMenuIconButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: IconButton

            view = CssEngine.FindParentByType<MainMenu>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (IconButton)untypedView;
            view.Css.Height = 50;
            view.Css.Border.Bottom = 1;
            view.Css.Border.Color = "#505050";
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "MainMenu IconButton #Icon")]
    [CssBody("background-size: contain; margin-top: 7px; height: 25px; width: 30px; margin-left: 10px;")]
    class MainMenuIconButtonIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = CssEngine.FindParentByType<IconButton>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<MainMenu>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundImageStretch = Stretch.Fit;
            view.Css.Height = 25;
            view.Css.Width = 30;
            view.Css.Margin.Top = 7;
            view.Css.Margin.Left = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Default #BodyScroller > #Body")]
    [CssBody("padding: 10px;")]
    class DefaultBodyScrollerBodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = view.parent;

            if (view == null) return false;
            else if (!(view.Id == "BodyScroller")) return false;

            view = CssEngine.FindParentByType<Default>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(10);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "TextInput")]
    [CssBody("padding: 7px; border: 1px solid #eee;")]
    class TextInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Padding(7);
            view.Css.Border = new Border(1, "#eee");

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Button")]
    [CssBody("padding: 5px;")]
    class ButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Padding(5);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "CheckBox")]
    [CssBody("width: 24px; height: 24px; border: 1px solid #aaaaaa; border-radius: 12px; background: transparent;")]
    class CheckBoxCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: CheckBox

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CheckBox)untypedView;
            view.Css.Height = 24;
            view.Css.Width = 24;
            view.Css.Border = new Border(1, "#aaaaaa");
            view.Css.Border.Radius = 12;
            view.Css.BackgroundColor = Colors.Transparent;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "CheckBox:checked")]
    [CssBody("background-color: #43aaa9;")]
    class CheckBoxCheckedCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is CheckBox && view.PseudoCssState.ContainsWholeWord("checked"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CheckBox)untypedView;
            view.Css.BackgroundColor = "#43aaa9";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "CheckBox > #CheckedImage")]
    [CssBody("width: 100%; height: 100%; background-image: url(Images/Icons/Check.png); background-size: contain; padding: 2px;")]
    class CheckBoxCheckedImageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CheckedImage

            view = view.parent;

            if (view == null) return false;
            else if (!(view is CheckBox)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundImageStretch = Stretch.Fit;
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Padding(2);
            view.Css.BackgroundImagePath = "Images/Icons/Check.png";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "IconButton")]
    [CssBody("margin: 2px; height: 40px; padding: 5px;")]
    class IconButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: IconButton

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (IconButton)untypedView;
            view.Css.Height = 40;
            view.Css.Padding(5);
            view.Css.Margin(2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "IconButton > #TextView")]
    [CssBody("text-align: center; height: 100%;")]
    class IconButtonTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextView

            view = view.parent;

            if (view == null) return false;
            else if (!(view is IconButton)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "IconButton > #Icon")]
    [CssBody("height: 20px; background-position: left; background-size: contain; margin-top: 5px; margin-left: 5px;")]
    class IconButtonIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = view.parent;

            if (view == null) return false;
            else if (!(view is IconButton)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundImageStretch = Stretch.Fit;
            view.Css.Height = 20;
            view.Css.Margin.Top = 5;
            view.Css.Margin.Left = 5;
            view.Css.BackgroundImageAlignment = Alignment.Left;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "SearchInput > #Icon")]
    [CssBody("background-image: url(Images/Icons/Search.png); opacity: 0.3; padding: 8px;")]
    class SearchInputIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = view.parent;

            if (view == null) return false;
            else if (!(view is SearchInput)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(8);
            view.Css.Opacity = 0.3f;
            view.Css.BackgroundImagePath = "Images/Icons/Search.png";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "SearchInput > #TextBox")]
    [CssBody("text-align: center;")]
    class SearchInputTextBoxCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextBox

            view = view.parent;

            if (view == null) return false;
            else if (!(view is SearchInput)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "SearchInput > #CancelButton")]
    [CssBody("border: 0; height: 100%; left: 100%; white-space: nowrap; padding: 0; opacity: 0;")]
    class SearchInputCancelButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CancelButton

            view = view.parent;

            if (view == null) return false;
            else if (!(view is SearchInput)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Padding(0);
            view.Css.Border = 0;
            view.Css.X = 100.Percent();
            view.Css.WrapText = false;
            view.Css.Opacity = 0;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "SearchInput:focus > #TextBox")]
    [CssBody("text-align: left; padding-left: 30px;")]
    class SearchInputFocusTextBoxCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextBox

            view = view.parent;

            if (view == null) return false;
            else if (!(view is SearchInput && view.PseudoCssState.ContainsWholeWord("focus"))) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Left = 30;
            view.Css.TextAlignment = Alignment.Left;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "SearchInput:focus > #CancelButton")]
    [CssBody("opacity: 1;")]
    class SearchInputFocusCancelButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CancelButton

            view = view.parent;

            if (view == null) return false;
            else if (!(view is SearchInput && view.PseudoCssState.ContainsWholeWord("focus"))) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Opacity = 1;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Switch")]
    [CssBody("width: 56px; height: 32px;")]
    class SwitchCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Switch

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Switch)untypedView;
            view.Css.Height = 32;
            view.Css.Width = 56;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Switch #Bar")]
    [CssBody("height: 32px; border-radius: 16px;")]
    class SwitchBarCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Bar

            view = CssEngine.FindParentByType<Switch>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 32;
            view.Css.Border.Radius = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Switch #Toggle")]
    [CssBody("height: 28px; width: 28px; border-radius: 14px; background: white; margin: 2px;")]
    class SwitchToggleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Toggle

            view = CssEngine.FindParentByType<Switch>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 28;
            view.Css.Width = 28;
            view.Css.Margin(2);
            view.Css.Border.Radius = 14;
            view.Css.BackgroundColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "FormField")]
    [CssBody("margin-top: 5px;")]
    class FormFieldCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: FormField

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (FormField)untypedView;
            view.Css.Margin.Top = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "FormField > #Label")]
    [CssBody("width: 30%; height: 100%;")]
    class FormFieldLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = view.parent;

            if (view == null) return false;
            else if (!(view is FormField)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 30.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "FormField > #Icon")]
    [CssBody("width: 30%; width: 25px; height: 25px;")]
    class FormFieldIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = view.parent;

            if (view == null) return false;
            else if (!(view is FormField)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 25;
            view.Css.Width = 30.Percent();
            view.Css.Width = 25;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Dialog")]
    [CssBody("background: white; padding: 15px; margin-top: calc(\"View.Root.Height, view.Height, (r, h) => (r - h) / 2\");")]
    class DialogCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Dialog

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Dialog)untypedView;
            view.Css.Padding(15);
            view.Css.Margin.Top = new Length.BindingLengthRequest(View.Root.Height, view.Height, (r, h) => (r - h) / 2);
            view.Css.BackgroundColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Dialog > #Title")]
    [CssBody("text-align: center; font-size: 16px; margin-bottom: 10px; font-weight: bold;")]
    class DialogTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = view.parent;

            if (view == null) return false;
            else if (!(view is Dialog)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = 16;
            view.Css.Font.Bold = true;
            view.Css.Margin.Bottom = 10;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Dialog > #ButtonsRow")]
    [CssBody("margin-top: 30px;")]
    class DialogButtonsRowCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #ButtonsRow

            view = view.parent;

            if (view == null) return false;
            else if (!(view is Dialog)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 30;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Prompt #Description")]
    [CssBody("white-space: pre-wrap;")]
    class PromptDescriptionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Description

            view = CssEngine.FindParentByType<Prompt>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.WrapText = true;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Prompt #Input")]
    [CssBody("margin-top: 10px; margin-bottom: 10px;")]
    class PromptInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Input

            view = CssEngine.FindParentByType<Prompt>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 10;
            view.Css.Margin.Bottom = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "AlertDialog #Message")]
    [CssBody("text-align: center; margin-top: 10px;")]
    class AlertDialogMessageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Message

            view = CssEngine.FindParentByType<AlertDialog>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 10;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "PopUp")]
    [CssBody("width: 100%; height: 100%; padding: 0 20px;")]
    class PopUpCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: PopUp

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (PopUp)untypedView;
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Padding(vertical: 0, horizontal: 20);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "#PopupOverlay")]
    [CssBody("width: 100%; height: 100%; position: absolute; opacity: 0.35; background: black;")]
    class PopupOverlayCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #PopupOverlay

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Absolute = true;
            view.Css.Opacity = 0.35f;
            view.Css.BackgroundColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "#WaitingOverlay")]
    [CssBody("width: 100%; height: 100%; position: absolute; opacity: 0.35; background: black;")]
    class WaitingOverlayCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #WaitingOverlay

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Absolute = true;
            view.Css.Opacity = 0.35f;
            view.Css.BackgroundColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "#WaitingOverlay")]
    [CssBody("opacity: 0.15;")]
    class WaitingOverlay_1CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #WaitingOverlay

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Opacity = 0.15f;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Toast")]
    [CssBody("background: black; border-radius: 7px; margin: 20px; padding: 20px;")]
    class ToastCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Toast

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Toast)untypedView;
            view.Css.Padding(20);
            view.Css.Margin(20);
            view.Css.BackgroundColor = Colors.Black;
            view.Css.Border.Radius = 7;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Toast #OKButton")]
    [CssBody("height: auto; width: 50px;")]
    class ToastOKButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #OKButton

            view = CssEngine.FindParentByType<Toast>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = null;
            view.Css.Width = 50;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Toast #Label")]
    [CssBody("color: #fff;")]
    class ToastLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<Toast>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#fff";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Grid > #EmptyTextLabel")]
    [CssBody("text-align: center;")]
    class GridEmptyTextLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #EmptyTextLabel

            view = view.parent;

            if (view == null) return false;
            else if (!(view is Grid)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "ListView > #EmptyTextLabel")]
    [CssBody("text-align: center;")]
    class ListViewEmptyTextLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #EmptyTextLabel

            view = view.parent;

            if (view == null) return false;
            else if (!(view is ListView)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "ListViewItem")]
    [CssBody("border-top: 1px;")]
    class ListViewItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ListViewItem

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ListViewItem)untypedView;
            view.Css.Border.Top = 1;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "ListView:lazy-loaded OptionsList-Option")]
    [CssBody("height: 30px;")]
    class ListViewLazyLoadedOptionsListOptionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: OptionsList-Option

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is ListView && view.PseudoCssState.ContainsWholeWord("lazy-loaded")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (OptionsList.Option)untypedView;
            view.Css.Height = 30;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "NavBarPage")]
    [CssBody("height: 100%; width: 100%;")]
    class NavBarPageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: NavBarPage

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (NavBarPage)untypedView;
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "NavBarPage #BodyScroller")]
    [CssBody("background: white; height: 100%; width: 100%;")]
    class NavBarPageBodyScrollerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #BodyScroller

            view = CssEngine.FindParentByType<NavBarPage>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.BackgroundColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "NavBarPage #BodyScroller > #Body")]
    [CssBody("padding: 10px;")]
    class NavBarPageBodyScrollerBodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = view.parent;

            if (view == null) return false;
            else if (!(view.Id == "BodyScroller")) return false;

            view = CssEngine.FindParentByType<NavBarPage>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(10);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "NavigationBar")]
    [CssBody("height: 64px; padding: 10px;")]
    class NavigationBarCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: NavigationBar

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (NavigationBar)untypedView;
            view.Css.Height = 64;
            view.Css.Padding(10);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "NavigationBar > #Title")]
    [CssBody("font-size: 18px; font-weight: bold; text-align: center; width: 100%; height: 100%;")]
    class NavigationBarTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = view.parent;

            if (view == null) return false;
            else if (!(view is NavigationBar)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Font.Size = 18;
            view.Css.Font.Bold = true;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Indicator")]
    [CssBody("height: 60px; border-radius: 30px;")]
    class IndicatorCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Indicator

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Indicator)untypedView;
            view.Css.Height = 60;
            view.Css.Border.Radius = 30;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Indicator ImageView")]
    [CssBody("height: 100%;")]
    class IndicatorImageViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ImageView

            view = CssEngine.FindParentByType<Indicator>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Height = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "#Indicator")]
    [CssBody("width: 100px; color: black; font-size: 16px; position: absolute; top: calc(\"View.Root.Height, view.Height, (r,h) => (r - h) / 2\"); left: calc(\"View.Root.Width, view.Width, (r,w) => (r - w) / 2\");")]
    class Indicator_1CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Indicator

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 100;
            view.Css.Font.Size = 16;
            view.Css.TextColor = Colors.Black;
            view.Css.Absolute = true;
            view.Css.Y = new Length.BindingLengthRequest(View.Root.Height, view.Height, (r,h) => (r - h) / 2);
            view.Css.X = new Length.BindingLengthRequest(View.Root.Width, view.Width, (r,w) => (r - w) / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "#RefreshingIndicator")]
    [CssBody("width: 50px; height: 50px; background: url(Images/Icons/Spinner.png);")]
    class RefreshingIndicatorCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #RefreshingIndicator

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 50;
            view.Css.Width = 50;
            view.Css.BackgroundImagePath = "Images/Icons/Spinner.png";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Tabs")]
    [CssBody("background: #444444; height: 54px;")]
    class TabsCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Tabs

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Tabs)untypedView;
            view.Css.Height = 54;
            view.Css.BackgroundColor = "#444444";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Tabs Tabs-Tab")]
    [CssBody("padding-top: 9px; padding-bottom: 9px;")]
    class TabsTabsTabCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Tabs-Tab

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Tabs.Tab)untypedView;
            view.Css.Padding.Top = 9;
            view.Css.Padding.Bottom = 9;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Tabs Tabs-Tab #Icon")]
    [CssBody("background-position: center; height: 22px; width: 100%;")]
    class TabsTabsTabIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = CssEngine.FindParentByType<Tabs.Tab>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 22;
            view.Css.Width = 100.Percent();
            view.Css.BackgroundImageAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Tabs Tabs-Tab #Label")]
    [CssBody("font-size: 11px; color: #eeeeee; width: 100%; text-align: center;")]
    class TabsTabsTabLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<Tabs.Tab>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 100.Percent();
            view.Css.Font.Size = 11;
            view.Css.TextColor = "#eeeeee";
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "DatePicker-Cell")]
    [CssBody("height: 50px; width: 100%;")]
    class DatePickerCellCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: DatePicker-Cell

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (DatePicker.Cell)untypedView;
            view.Css.Height = 50;
            view.Css.Width = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "TimePicker-Cell")]
    [CssBody("height: 50px; width: 100%;")]
    class TimePickerCellCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TimePicker-Cell

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TimePicker.Cell)untypedView;
            view.Css.Height = 50;
            view.Css.Width = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "DatePicker-Cell #Label")]
    [CssBody("height: 100%; width: 100%; text-align: center; font-size: 16px;")]
    class DatePickerCellLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<DatePicker.Cell>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Font.Size = 16;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "TimePicker-Cell #Label")]
    [CssBody("height: 100%; width: 100%; text-align: center; font-size: 16px;")]
    class TimePickerCellLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<TimePicker.Cell>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Font.Size = 16;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "DatePicker-Dialog #RotatorsRow")]
    [CssBody("margin-top: 15px;")]
    class DatePickerDialogRotatorsRowCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #RotatorsRow

            view = CssEngine.FindParentByType<DatePicker.Dialog>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "TimePicker-Dialog #RotatorsRow")]
    [CssBody("margin-top: 15px;")]
    class TimePickerDialogRotatorsRowCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #RotatorsRow

            view = CssEngine.FindParentByType<TimePicker.Dialog>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Picker")]
    [CssBody("padding: 7px; border: 1px solid #eee;")]
    class PickerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Picker

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Picker)untypedView;
            view.Css.Padding(7);
            view.Css.Border = new Border(1, "#eee");

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Picker #Label")]
    [CssBody("height: auto;")]
    class PickerLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<Picker>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = null;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Picker #Caret")]
    [CssBody("background: url(Images/Icons/Caret.png); width: 20px;")]
    class PickerCaretCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Caret

            view = CssEngine.FindParentByType<Picker>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 20;
            view.Css.BackgroundImagePath = "Images/Icons/Caret.png";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Core
{
    [CssSelector("Styles\\_Core.css", "Picker #PlaceholderLabel")]
    [CssBody("color: #ddd; height: 100%;")]
    class PickerPlaceholderLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #PlaceholderLabel

            view = CssEngine.FindParentByType<Picker>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.TextColor = "#ddd";

            return Task.CompletedTask;
        }
    }
}