/***********************************************
* GENERATED BY ZEBBLE
***********************************************/

#region UI.Modules.MainTabs
namespace UI.Modules
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;

    public partial class MainTabs : Zebble.Tabs
    {
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            var __tabs_Tab1 = new Tabs.Tab<Pages.Page1>()
            .Set(x => x.Label.Text = "Page 1")
            .Set(x => x.Icon.Path = "Images/Icons/Contacts.png");

            var __tabs_Tab2 = new Tabs.Tab<Pages.Page2>()
            .Set(x => x.Label.Text = "Page 2")
            .Set(x => x.Icon.Path = "Images/Icons/Types.png");

            var __tabs_Tab3 = new Tabs.Tab<Pages.Page3>()
            .Set(x => x.Label.Text = "Page 3")
            .Set(x => x.Icon.Path = "Images/Icons/Video.png");

            var __tabs_Tab4 = new Tabs.Tab<Pages.Page4>()
            .Set(x => x.Label.Text = "Page 4")
            .Set(x => x.Icon.Path = "Images/Icons/Contacts.png");

            var __tabs_Tab5 = new Tabs.Tab<Pages.Page5>()
            .Set(x => x.Label.Text = "Page 5")
            .Set(x => x.Icon.Path = "Images/Icons/Settings.png");

            await AddRange(new View[] { __tabs_Tab1, __tabs_Tab2, __tabs_Tab3, __tabs_Tab4, __tabs_Tab5 });
        }
    }
}
#endregion

#region UI.Pages.Welcome
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;

    public partial class Welcome : Page
    {
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            Style.Height = 100.Percent();

            var __textView1 = new TextView { Text = "WELCOME\n\n\n" }
            .Set(x => x.Style.Height = 100.Percent())
            .Set(x => x.Style.Width = 100.Percent())
            .Set(x => x.Style.Font.Size = 22)
            .Set(x => x.Style.BackgroundColor = "#555")
            .Set(x => x.Style.TextColor = Colors.White)
            .Set(x => x.Style.TextAlignment = Alignment.Middle)
            .Set(x => x.Style.TextAlignment = Alignment.Middle);

            await Add(__textView1);
        }
    }
}
#endregion

#region UI.Modules.ContactForm
namespace UI.Modules
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;

    public partial class ContactForm : Stack
    {
        public Button SaveButton;
        public TextView HeaderTitle;
        public FormField<TextInput> Name, Email, Tel, Notes;
        public FormField<DatePicker> DateOfBirth;
        public FormField<ItemPicker> Type;

        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            SaveButton = new Button { Id = "SaveButton", Text = "Save", CssClass = "navbar-button" }
            .On(x => x.Tapped, SaveButtonTapped);

            HeaderTitle = new TextView
            {
                Id = "HeaderTitle",
                Text = "Contact Details",
                CssClass = "module-header-title"
            };

            Name = new FormField<TextInput> { Id = "Name", LabelText = "Name", Mandatory = true };

            Email = new FormField<TextInput> { Id = "Email", LabelText = "Email" };

            Tel = new FormField<TextInput> { Id = "Tel", LabelText = "Tel" };

            Notes = new FormField<TextInput> { Id = "Notes", LabelText = "Notes" }
            .Set(x => x.Control.Lines = 5);

            DateOfBirth = new FormField<DatePicker> { Id = "DateOfBirth", LabelText = "Date of birth" }
            .Set(x => x.Control.AllowNull = true);

            Type = new FormField<ItemPicker> { Id = "Type", LabelText = "Type" }
            .Set(x => x.Control.AllowNull = true);

            await ((NavBarPage)Page).GetNavBar().AddButton(ButtonLocation.Right, SaveButton);
            await AddRange(new View[] { HeaderTitle, Name, Email, Tel, Notes, DateOfBirth, Type });
        }
    }
}
#endregion

#region UI.Modules.ContactsList
namespace UI.Modules
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;

    public partial class ContactsList : Stack
    {
        public ImageView AddButton;
        public TextView HeaderTitle, HeaderIntro;
        public Stack ButtonsContainer;
        public Button ReloadButton;
        public ListView<Contact, Row> List;

        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            CssClass = "standard-list";

            AddButton = new ImageView
            {
                Id = "AddButton",
                CssClass = "navbar-button",
                Path = "Images/Icons/White-Add.png"
                }.On(x => x.Tapped, () =>
                {
                    try { return Nav.Forward<Pages.Page1Enter>(); }
                    catch (Exception ex) { return Alert.Show(ex.Message); }
                }
                );

                HeaderTitle = new TextView
                {
                    Id = "HeaderTitle",
                    Text = "Contacts",
                    CssClass = "module-header-title"
                };

                HeaderIntro = new TextView
                {
                    Id = "HeaderIntro",
                    Text = "This module allows you to see all your contacts, interact with them and generally have a lot of fun with it. Am I long enough now?",
                    CssClass = "header-intro"
                };

                ButtonsContainer = new Stack
                {
                    Id = "ButtonsContainer",
                    Direction = RepeatDirection.Horizontal,
                    CssClass = "top-buttons-row"
                };

                ReloadButton = new Button { Id = "ReloadButton", Text = "Reload" }
                .On(x => x.Tapped, ReloadButtonTapped);

                List = new ListView<Contact, Row> { Id = "List", LazyLoad = true, DataSource = Items, };

                var __listView_EmptyTemplate1 = new ListView.EmptyTemplate();

                var __textView1 = new TextView { Text = "Nothing in pending list" };

                await __listView_EmptyTemplate1.Add(__textView1);
                await ButtonsContainer.Add(ReloadButton);
                await List.Add(__listView_EmptyTemplate1);
                await ((NavBarPage)Page).GetNavBar().AddButton(ButtonLocation.Right, AddButton);
                await AddRange(new View[] { HeaderTitle, HeaderIntro, ButtonsContainer, List });
            }

            public partial class Row : ListViewItem<Contact>
            {
                public Stack NameColumn;
                public TextView Name, ContactDetails;
                public ImageView ViewButton;
                public Button DeleteButton;

                protected override async Task InitializeFromMarkup()
                {
                    await base.InitializeFromMarkup();

                    AutoFlash = true;

                    Tapped.Handle(ViewButtonTapped);

                    NameColumn = new Stack { Id = "NameColumn" };

                    Name = new TextView { Id = "Name", CssClass = "title", Text = Item.Name };

                    ContactDetails = new TextView
                    {
                        Id = "ContactDetails",
                        Text = (new[]{Item.Email , Item.Tel}.Trim().ToString(", "))
                    };

                    ViewButton = new ImageView
                    {
                        Id = "ViewButton",
                        CssClass = "view-row",
                        Path = "Images/Icons/Arrow-Right.png",
                        AutoFlash = true
                    }
                    .On(x => x.Tapped, ViewButtonTapped);

                    DeleteButton = new Button { Id = "DeleteButton", Text = "Delete", CssClass = "delete-button" }
                    .On(x => x.Tapped, DeleteButtonTapped);

                    await NameColumn.AddRange(new View[] { Name, ContactDetails });
                    await RightSlideIn.Add(DeleteButton);
                    await AddRange(new View[] { NameColumn, ViewButton });
                }
                }}
            }
            #endregion

#region UI.Modules.MainMenu
namespace UI.Modules
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;

    public partial class MainMenu : Canvas
    {
        public Stack Body, ButtonsContainer, Items;
        public ImageView LogoImage;
        public IconButton Page1, Page2, Page3, Contact;

        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            Body = new Stack { Id = "Body" };

            ButtonsContainer = new Stack
            {
                Id = "ButtonsContainer",
                Direction = RepeatDirection.Horizontal,
                CssClass = "top-buttons-row"
            };

            LogoImage = new ImageView { Id = "LogoImage", Path = "/Images/Logo.png" };

            Items = new Stack { Id = "Items" };

            Page1 = new IconButton { Id = "Page1", Text = "Page 1", IconPath = "Images/Icons/contacts.png" }
            .On(x => x.Tapped, Page1Tapped);

            Page2 = new IconButton { Id = "Page2", Text = "Page 2", IconPath = "Images/Icons/Types.png" }
            .On(x => x.Tapped, Page2Tapped);

            Page3 = new IconButton { Id = "Page3", Text = "Page 3", IconPath = "Images/Icons/Settings.png" }
            .On(x => x.Tapped, Page3Tapped);

            Contact = new IconButton
            {
                Id = "Contact",
                Text = "Page 4",
                IconPath = "Images/Icons/Contacts.png"
            }
            .On(x => x.Tapped, ContactTapped);

            await ButtonsContainer.Add(LogoImage);
            await Items.AddRange(new View[] { Page1, Page2, Page3, Contact });
            await Body.AddRange(new View[] { ButtonsContainer, Items });
            await Add(Body);
        }
    }
}
#endregion

#region UI.Pages.Page1
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;

    public partial class Page1 : Templates.Default
    {
        public Modules.ContactsList ContactsList;

        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            Data["TopMenu"] = "MainMenu";
            Title = "Page 1";

            ContactsList = new Modules.ContactsList { Id = "ContactsList" };

            await Body.Add(ContactsList);
        }
    }
}
#endregion

#region UI.Pages.Page2
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;

    public partial class Page2 : Templates.Default
    {
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            Data["TopMenu"] = "MainMenu";
            Title = "Page 2";
        }
    }
}
#endregion

#region UI.Pages.Page3
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;

    public partial class Page3 : Templates.Default
    {
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            Data["TopMenu"] = "MainMenu";
            Title = "Page 3";
        }
    }
}
#endregion

#region UI.Pages.Page4
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;

    public partial class Page4 : Templates.Default
    {
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            Data["TopMenu"] = "MainMenu";
            Title = "Page 4";
        }
    }
}
#endregion

#region UI.Pages.Page5
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;

    public partial class Page5 : Templates.Default
    {
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            Data["TopMenu"] = "MainMenu";
            Title = "About us";

            var __textView1 = new TextView { Text = "Hello world!" };

            await Body.Add(__textView1);
        }
    }
}
#endregion

#region UI.Pages.Page1Enter
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;

    public partial class Page1Enter : Templates.Default
    {
        public LazyLoader ContactFormLoader;
        public Modules.ContactForm ContactForm;

        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            Data["TopMenu"] = "MainMenu";
            Title = "Contact details";

            ContactFormLoader = new LazyLoader { Id = "ContactFormLoader" };

            ContactForm = new Modules.ContactForm { Id = "ContactForm" };

            await ContactFormLoader.Add(ContactForm);
            await Body.Add(ContactFormLoader);
        }
    }
}
#endregion

namespace UI
{
    partial class StartUp
    {
        // Hashed content of all resources
        public override string GetResourcesVersion() => "Y4cLzaT8nmN35ExCCWUWgmoiyc";
    }
}
